From 74b173a47c97bde27ae075594cc4423fd3f5fddb Mon Sep 17 00:00:00 2001
From: sub77 <sub77@ymail.com>
Date: Mon, 30 Oct 2017 14:29:02 +0000
Subject: [PATCH 1/2] Revert "av: add needed QCOM_HARDWARE"

This reverts commit 73978387c28ac914ce4e0df2d482ab471e5076f6.
---
 camera/Android.mk                                   |  4 ----
 camera/ICameraClient.cpp                            |  8 --------
 media/libmediaplayerservice/nuplayer/Android.mk     |  4 ----
 .../nuplayer/NuPlayerRenderer.cpp                   |  7 +------
 services/audiopolicy/Android.mk                     |  4 ----
 .../managerdefault/AudioPolicyManager.cpp           | 21 ++++-----------------
 services/camera/libcameraservice/Android.mk         |  3 ---
 .../camera/libcameraservice/api1/CameraClient.cpp   |  2 --
 .../device1/CameraHardwareInterface.cpp             |  2 --
 .../device1/CameraHardwareInterface.h               |  8 --------
 10 files changed, 5 insertions(+), 58 deletions(-)

diff --git a/camera/Android.mk b/camera/Android.mk
index cdbc7b3..91d87ed 100644
--- a/camera/Android.mk
+++ b/camera/Android.mk
@@ -71,10 +71,6 @@ LOCAL_EXPORT_C_INCLUDE_DIRS := \
 	system/media/camera/include \
 	$(LOCAL_PATH)/include/camera
 
-ifeq ($(BOARD_USES_QCOM_HARDWARE),true)
-    LOCAL_CFLAGS += -DQCOM_HARDWARE
-endif
-
 LOCAL_CFLAGS += -Werror -Wall -Wextra
 
 LOCAL_MODULE:= libcamera_client
diff --git a/camera/ICameraClient.cpp b/camera/ICameraClient.cpp
index c97e3b0..5eb3fdf 100644
--- a/camera/ICameraClient.cpp
+++ b/camera/ICameraClient.cpp
@@ -51,16 +51,12 @@ public:
         data.writeInterfaceToken(ICameraClient::getInterfaceDescriptor());
         data.writeInt32(msgType);
         data.writeInt32(ext1);
-#ifdef QCOM_HARDWARE
         if ((msgType == CAMERA_MSG_PREVIEW_FRAME) && (ext1 == CAMERA_FRAME_DATA_FD)) {
             ALOGD("notifyCallback: CAMERA_MSG_PREVIEW_FRAME fd = %d", ext2);
             data.writeFileDescriptor(ext2);
         } else {
             data.writeInt32(ext2);
         }
-#else
-        data.writeInt32(ext2);
-#endif
         remote()->transact(NOTIFY_CALLBACK, data, &reply, IBinder::FLAG_ONEWAY);
     }
 
@@ -139,7 +135,6 @@ status_t BnCameraClient::onTransact(
             CHECK_INTERFACE(ICameraClient, data, reply);
             int32_t msgType = data.readInt32();
             int32_t ext1    = data.readInt32();
-#ifdef QCOM_HARDWARE
             int32_t ext2    = 0;
             if ((msgType == CAMERA_MSG_PREVIEW_FRAME) && (ext1 == CAMERA_FRAME_DATA_FD)) {
                 ext2 = data.readFileDescriptor();
@@ -147,9 +142,6 @@ status_t BnCameraClient::onTransact(
             } else {
                 ext2 = data.readInt32();
             }
-#else
-            int32_t ext2 = data.readInt32();
-#endif
             notifyCallback(msgType, ext1, ext2);
             return NO_ERROR;
         } break;
diff --git a/media/libmediaplayerservice/nuplayer/Android.mk b/media/libmediaplayerservice/nuplayer/Android.mk
index fa59483..0e20516 100644
--- a/media/libmediaplayerservice/nuplayer/Android.mk
+++ b/media/libmediaplayerservice/nuplayer/Android.mk
@@ -27,10 +27,6 @@ LOCAL_C_INCLUDES := \
 	$(TOP)/frameworks/native/include/media/openmax                \
 	$(TOP)/frameworks/av/media/libavextensions
 
-ifeq ($(BOARD_USES_QCOM_HARDWARE),true)
-    LOCAL_CFLAGS += -DQCOM_HARDWARE
-endif
-
 LOCAL_CFLAGS += -Werror -Wall
 
 # enable experiments only in userdebug and eng builds
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.cpp b/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.cpp
index 57050a7..f548c37 100644
--- a/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.cpp
+++ b/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.cpp
@@ -1958,12 +1958,10 @@ status_t NuPlayer::Renderer::onOpenAudioSink(
                 }
             }
 
-#ifdef QCOM_HARDWARE
             int32_t offloadBufferSize =
                                     AVUtils::get()->getAudioMaxInputBufferSize(
                                                    audioFormat,
                                                    format);
-#endif
             audio_offload_info_t offloadInfo = AUDIO_INFO_INITIALIZER;
             offloadInfo.duration_us = -1;
             format->findInt64(
@@ -1975,11 +1973,8 @@ status_t NuPlayer::Renderer::onOpenAudioSink(
             offloadInfo.stream_type = AUDIO_STREAM_MUSIC;
             offloadInfo.bit_rate = avgBitRate;
             offloadInfo.has_video = hasVideo;
-            offloadInfo.is_streaming = isStreaming;
-#ifdef QCOM_HARDWARE
-            offloadInfo.bit_width = bitWidth;
             offloadInfo.offload_buffer_size = offloadBufferSize;
-#endif
+            offloadInfo.is_streaming = isStreaming;
 
             if (memcmp(&mCurrentOffloadInfo, &offloadInfo, sizeof(offloadInfo)) == 0) {
                 ALOGV("openAudioSink: no change in offload mode");
diff --git a/services/audiopolicy/Android.mk b/services/audiopolicy/Android.mk
index 5e911bd..7cd2b81 100644
--- a/services/audiopolicy/Android.mk
+++ b/services/audiopolicy/Android.mk
@@ -42,10 +42,6 @@ include $(CLEAR_VARS)
 
 LOCAL_SRC_FILES:= managerdefault/AudioPolicyManager.cpp
 
-ifeq ($(BOARD_USES_QCOM_HARDWARE),true)
-    LOCAL_CFLAGS += -DQCOM_HARDWARE
-endif
-
 LOCAL_SHARED_LIBRARIES := \
     libcutils \
     libutils \
diff --git a/services/audiopolicy/managerdefault/AudioPolicyManager.cpp b/services/audiopolicy/managerdefault/AudioPolicyManager.cpp
index e4fa51c..9fa9d28 100644
--- a/services/audiopolicy/managerdefault/AudioPolicyManager.cpp
+++ b/services/audiopolicy/managerdefault/AudioPolicyManager.cpp
@@ -709,12 +709,8 @@ sp<IOProfile> AudioPolicyManager::getProfileForDirectOutput(
     // only retain flags that will drive the direct output profile selection
     // if explicitly requested
     static const uint32_t kRelevantFlags =
-            (AUDIO_OUTPUT_FLAG_HW_AV_SYNC | AUDIO_OUTPUT_FLAG_COMPRESS_OFFLOAD
-#ifdef QCOM_HARDWARE
-                | AUDIO_OUTPUT_FLAG_VOIP_RX);
-#else
-                );
-#endif
+            (AUDIO_OUTPUT_FLAG_HW_AV_SYNC | AUDIO_OUTPUT_FLAG_COMPRESS_OFFLOAD |
+             AUDIO_OUTPUT_FLAG_VOIP_RX);
     flags =
         (audio_output_flags_t)((flags & kRelevantFlags) | AUDIO_OUTPUT_FLAG_DIRECT);
 
@@ -2224,9 +2220,7 @@ audio_io_handle_t AudioPolicyManager::selectOutputForMusicEffects()
 
     while (output == AUDIO_IO_HANDLE_NONE) {
         audio_io_handle_t outputOffloaded = AUDIO_IO_HANDLE_NONE;
-#ifdef QCOM_HARDWARE
         audio_io_handle_t outputDirect = AUDIO_IO_HANDLE_NONE;
-#endif
         audio_io_handle_t outputDeepBuffer = AUDIO_IO_HANDLE_NONE;
         audio_io_handle_t outputPrimary = AUDIO_IO_HANDLE_NONE;
 
@@ -2240,11 +2234,9 @@ audio_io_handle_t AudioPolicyManager::selectOutputForMusicEffects()
             if ((desc->mFlags & AUDIO_OUTPUT_FLAG_COMPRESS_OFFLOAD) != 0) {
                 outputOffloaded = outputs[i];
             }
-#ifdef QCOM_HARDWARE
             if ((desc->mFlags == AUDIO_OUTPUT_FLAG_DIRECT) != 0) {
                 outputDirect = outputs[i];
             }
-#endif
             if ((desc->mFlags & AUDIO_OUTPUT_FLAG_DEEP_BUFFER) != 0) {
                 outputDeepBuffer = outputs[i];
             }
@@ -2254,10 +2246,8 @@ audio_io_handle_t AudioPolicyManager::selectOutputForMusicEffects()
         }
         if (outputOffloaded != AUDIO_IO_HANDLE_NONE) {
             output = outputOffloaded;
-#ifdef QCOM_HARDWARE
         } else if (outputDirect != AUDIO_IO_HANDLE_NONE) {
             output = outputDirect;
-#endif
         } else if (outputDeepBuffer != AUDIO_IO_HANDLE_NONE) {
             output = outputDeepBuffer;
         } else if (outputPrimary != AUDIO_IO_HANDLE_NONE) {
@@ -3364,11 +3354,8 @@ status_t AudioPolicyManager::setMasterMono(bool mono)
         Vector<audio_io_handle_t> offloaded;
         for (size_t i = 0; i < mOutputs.size(); ++i) {
             sp<SwAudioOutputDescriptor> desc = mOutputs.valueAt(i);
-            if (desc->mFlags & AUDIO_OUTPUT_FLAG_COMPRESS_OFFLOAD
-#ifdef QCOM_HARDWARE
-                 || desc->mFlags == AUDIO_OUTPUT_FLAG_DIRECT
-#endif
-                ) {
+            if (desc->mFlags & AUDIO_OUTPUT_FLAG_COMPRESS_OFFLOAD ||
+                desc->mFlags == AUDIO_OUTPUT_FLAG_DIRECT) {
                 offloaded.push(desc->mIoHandle);
             }
         }
diff --git a/services/camera/libcameraservice/Android.mk b/services/camera/libcameraservice/Android.mk
index 9d77a8e..a4a783f 100644
--- a/services/camera/libcameraservice/Android.mk
+++ b/services/camera/libcameraservice/Android.mk
@@ -104,9 +104,6 @@ ifeq ($(TARGET_USES_QCOM_BSP),true)
 LOCAL_SHARED_LIBRARIES += \
     vendor.qti.hardware.camera.device@1.0
 endif
-ifeq ($(BOARD_USES_QCOM_HARDWARE),true)
-    LOCAL_CFLAGS += -DQCOM_HARDWARE
-endif
 
 LOCAL_EXPORT_SHARED_LIBRARY_HEADERS := libbinder libcamera_client libfmq
 
diff --git a/services/camera/libcameraservice/api1/CameraClient.cpp b/services/camera/libcameraservice/api1/CameraClient.cpp
index d0e4945..59a900b 100644
--- a/services/camera/libcameraservice/api1/CameraClient.cpp
+++ b/services/camera/libcameraservice/api1/CameraClient.cpp
@@ -767,7 +767,6 @@ status_t CameraClient::sendCommand(int32_t cmd, int32_t arg1, int32_t arg2) {
     } else if (cmd == CAMERA_CMD_PING) {
         // If mHardware is 0, checkPidAndHardware will return error.
         return OK;
-#ifdef QCOM_HARDWARE
     } else if (cmd == CAMERA_CMD_HISTOGRAM_ON) {
         enableMsgType(CAMERA_MSG_STATS_DATA);
     } else if (cmd == CAMERA_CMD_HISTOGRAM_OFF) {
@@ -782,7 +781,6 @@ status_t CameraClient::sendCommand(int32_t cmd, int32_t arg1, int32_t arg2) {
         mLongshotEnabled = false;
         disableMsgType(CAMERA_MSG_SHUTTER);
         disableMsgType(CAMERA_MSG_COMPRESSED_IMAGE);
-#endif
     }
 
     return mHardware->sendCommand(cmd, arg1, arg2);
diff --git a/services/camera/libcameraservice/device1/CameraHardwareInterface.cpp b/services/camera/libcameraservice/device1/CameraHardwareInterface.cpp
index 207751e..9a1ec29 100644
--- a/services/camera/libcameraservice/device1/CameraHardwareInterface.cpp
+++ b/services/camera/libcameraservice/device1/CameraHardwareInterface.cpp
@@ -137,7 +137,6 @@ hardware::Return<void> CameraHardwareInterface::dataCallback(
     return hardware::Void();
 }
 
-#ifdef QCOM_HARDWARE
 hardware::Return<void> CameraHardwareInterface::QDataCallback(
         DataCallbackMsg msgType, uint32_t data, uint32_t bufferIndex,
         const vendor::qti::hardware::camera::device::V1_0::QCameraFrameMetadata& metadata) {
@@ -151,7 +150,6 @@ hardware::Return<void> CameraHardwareInterface::QDataCallback(
     sDataCb((int32_t) msgType, mHidlMemPoolMap.at(data), bufferIndex, &md, this);
     return hardware::Void();
 }
-#endif
 
 hardware::Return<void> CameraHardwareInterface::dataCallbackTimestamp(
         DataCallbackMsg msgType, uint32_t data,
diff --git a/services/camera/libcameraservice/device1/CameraHardwareInterface.h b/services/camera/libcameraservice/device1/CameraHardwareInterface.h
index 2797bc6..42d88b8 100644
--- a/services/camera/libcameraservice/device1/CameraHardwareInterface.h
+++ b/services/camera/libcameraservice/device1/CameraHardwareInterface.h
@@ -29,9 +29,7 @@
 #include <hardware/camera.h>
 
 #include <common/CameraProviderManager.h>
-#ifdef QCOM_HARDWARE
 #include <vendor/qti/hardware/camera/device/1.0/IQCameraDeviceCallback.h>
-#endif
 
 namespace android {
 
@@ -88,11 +86,7 @@ typedef void (*data_callback_timestamp_batch)(
 
 class CameraHardwareInterface :
         public virtual RefBase,
-#ifdef QCOM_HARDWARE
         public virtual vendor::qti::hardware::camera::device::V1_0::IQCameraDeviceCallback,
-#else
-        public virtual hardware::camera::device::V1_0::ICameraDeviceCallback,
-#endif
         public virtual hardware::camera::device::V1_0::ICameraDevicePreviewCallback {
 
 public:
@@ -439,12 +433,10 @@ private:
             hardware::camera::device::V1_0::DataCallbackMsg msgType,
             const hardware::hidl_vec<
                     hardware::camera::device::V1_0::HandleTimestampMessage>&) override;
-#ifdef QCOM_HARDWARE
     hardware::Return<void> QDataCallback(
             hardware::camera::device::V1_0::DataCallbackMsg msgType,
             uint32_t data, uint32_t bufferIndex,
             const vendor::qti::hardware::camera::device::V1_0::QCameraFrameMetadata& metadata) override;
-#endif
 
     /**
      * Implementation of android::hardware::camera::device::V1_0::ICameraDevicePreviewCallback
-- 
2.1.2

