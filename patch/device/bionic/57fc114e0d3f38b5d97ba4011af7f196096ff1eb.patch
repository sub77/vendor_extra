From 57fc114e0d3f38b5d97ba4011af7f196096ff1eb Mon Sep 17 00:00:00 2001
From: Adrian DC <radian.dc@gmail.com>
Date: Sun, 13 Aug 2017 02:26:02 +0200
Subject: [PATCH] libc fortify: Ignore open() O_TMPFILE mode bits warning

 * The commits rely on the definition of O_TMPFILE,
    which is done in the kernel's uapi/asm-generic/fcntl.h

 * However when we build hardware HALs with kernel
    headers support and inline kernel build, we have
    a few packages that use the kernel's fcntl.h
    instead of the common 4.12.3 current headers

 * Backporting would be mandatory to all kernels
    to have the definition available at build time

Partially revert "With O_TMPFILE, open(2) takes a mode argument."
This partially reverts commit b115aefbb3a472c605e167e09d14b1a797337e77.

Partially revert "libc fortify: warn on open() with useless mode bits"
This partially reverts commit 4e37d53f2999f683e99a5cf90d2651e2cd9924fc.

Change-Id: Ic0ab72f3de8310295799b2d38a898585b6f1dcfe
Signed-off-by: Adrian DC <radian.dc@gmail.com>
---
 libc/bionic/open.cpp                         |  3 ++-
 libc/include/bits/fortify/fcntl.h            |  3 ++-
 tests/fcntl_test.cpp                         |  2 ++
 tests/fortify_filecheck_diagnostics_test.cpp |  4 ++--
 tests/fortify_test.cpp                       | 12 ++++++------
 5 files changed, 14 insertions(+), 10 deletions(-)

diff --git a/libc/bionic/open.cpp b/libc/bionic/open.cpp
index 222e5d3f4..4de4117bb 100644
--- a/libc/bionic/open.cpp
+++ b/libc/bionic/open.cpp
@@ -44,7 +44,8 @@ static inline int force_O_LARGEFILE(int flags) {
 }
 
 static inline bool needs_mode(int flags) {
-  return ((flags & O_CREAT) == O_CREAT) || ((flags & O_TMPFILE) == O_TMPFILE);
+  /* Ignored: || ((flags & O_TMPFILE) == O_TMPFILE) */
+  return ((flags & O_CREAT) == O_CREAT);
 }
 
 int creat(const char* pathname, mode_t mode) {
diff --git a/libc/include/bits/fortify/fcntl.h b/libc/include/bits/fortify/fcntl.h
index 75cd4f2ed..ca563b4a6 100644
--- a/libc/include/bits/fortify/fcntl.h
+++ b/libc/include/bits/fortify/fcntl.h
@@ -43,7 +43,8 @@ int __openat_real(int, const char*, int, ...) __RENAME(openat);
 #define __open_too_few_args_error "called with O_CREAT or O_TMPFILE, but missing mode"
 #define __open_useless_modes_warning "has superfluous mode bits; missing O_CREAT?"
 /* O_TMPFILE shares bits with O_DIRECTORY. */
-#define __open_modes_useful(flags) (((flags) & O_CREAT) || ((flags) & O_TMPFILE) == O_TMPFILE)
+/* Ignored: || ((flags & O_TMPFILE) == O_TMPFILE) */
+#define __open_modes_useful(flags) ((flags) & O_CREAT)
 #if defined(__clang__)
 
 #if __ANDROID_API__ >= __ANDROID_API_J_MR1__
diff --git a/tests/fcntl_test.cpp b/tests/fcntl_test.cpp
index 0a83dff06..fa44848b6 100644
--- a/tests/fcntl_test.cpp
+++ b/tests/fcntl_test.cpp
@@ -301,6 +301,7 @@ TEST(fcntl, falloc_punch) {
   }
 }
 
+/*
 TEST(fcntl, open_O_TMPFILE_mode) {
 #if __BIONIC__ // Our glibc is too old for O_TMPFILE.
   TemporaryDir dir;
@@ -343,3 +344,4 @@ TEST(fcntl, open_O_TMPFILE_mode) {
   ASSERT_EQ(0, close(fd));
 #endif
 }
+*/
diff --git a/tests/fortify_filecheck_diagnostics_test.cpp b/tests/fortify_filecheck_diagnostics_test.cpp
index c6198c665..b1fd8dd19 100644
--- a/tests/fortify_filecheck_diagnostics_test.cpp
+++ b/tests/fortify_filecheck_diagnostics_test.cpp
@@ -246,7 +246,7 @@ void test_open() {
 
   // GCC: error: call to '__creat_missing_mode' declared with attribute error: called with O_CREAT or O_TMPFILE, but missing mode
   // CLANG: error: 'open' called with O_CREAT or O_TMPFILE, but missing mode
-  open("/dev/null", O_TMPFILE);
+  //open("/dev/null", O_TMPFILE);
 
   // NOLINTNEXTLINE(whitespace/line_length)
   // GCC: error: call to '__creat_too_many_args' declared with attribute error: too many arguments
@@ -255,7 +255,7 @@ void test_open() {
 
   // GCC: error: call to '__creat_too_many_args' declared with attribute error: too many arguments
   // CLANG: error: call to unavailable function 'open': too many arguments
-  open("/dev/null", O_TMPFILE, 0, 0);
+  //open("/dev/null", O_TMPFILE, 0, 0);
 
   // CLANG: warning: 'open' has superfluous mode bits; missing O_CREAT?
   open("/dev/null", O_RDONLY, 0644);
diff --git a/tests/fortify_test.cpp b/tests/fortify_test.cpp
index 67c124d71..fd8af20c0 100644
--- a/tests/fortify_test.cpp
+++ b/tests/fortify_test.cpp
@@ -1003,9 +1003,9 @@ TEST_F(DEATHTEST, open_O_CREAT_without_mode_fortified) {
   ASSERT_FORTIFY(open("", flags));
 }
 
-TEST_F(DEATHTEST, open_O_TMPFILE_without_mode_fortified) {
-#if __BIONIC__ // Our glibc is too old for O_TMPFILE.
-  int flags = O_TMPFILE; // Fool the compiler.
-  ASSERT_FORTIFY(open("", flags));
-#endif
-}
+//TEST_F(DEATHTEST, open_O_TMPFILE_without_mode_fortified) {
+//#if __BIONIC__ // Our glibc is too old for O_TMPFILE.
+//  int flags = O_TMPFILE; // Fool the compiler.
+//  ASSERT_FORTIFY(open("", flags));
+//#endif
+//}
