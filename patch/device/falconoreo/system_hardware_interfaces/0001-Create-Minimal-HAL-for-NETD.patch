From a80b8835d3d7d52e81fb5d2e1cb61d63d21a7a71 Mon Sep 17 00:00:00 2001
From: Tyler Wear <twear@codeaurora.org>
Date: Tue, 27 Jun 2017 13:04:17 -0700
Subject: [PATCH] Create Minimal HAL for NETD

Minimalistic HAL interface to detect netd restarts.
Interface for oem network create and destroy.
VTS for create and destroy oem network.

Bug: 36682246
CRs-fixed: 2070022
Change-Id: I45d53f90ff2e868a98d2698d8a64048013d268ea
---
 Android.bp                                         |  1 +
 current.txt                                        |  1 +
 net/Android.bp                                     |  6 ++
 net/netd/1.0/Android.bp                            | 59 ++++++++++++++++
 net/netd/1.0/INetd.hal                             | 71 +++++++++++++++++++
 net/netd/1.0/vts/functional/Android.bp             | 18 +++++
 .../vts/functional/VtsHalNetNetdV1_0TargetTest.cpp | 81 ++++++++++++++++++++++
 7 files changed, 237 insertions(+)
 create mode 100644 net/Android.bp
 create mode 100644 net/netd/1.0/Android.bp
 create mode 100644 net/netd/1.0/INetd.hal
 create mode 100644 net/netd/1.0/vts/functional/Android.bp
 create mode 100644 net/netd/1.0/vts/functional/VtsHalNetNetdV1_0TargetTest.cpp

diff --git a/Android.bp b/Android.bp
index ebf99c2..b64906e 100644
--- a/Android.bp
+++ b/Android.bp
@@ -2,4 +2,5 @@
 subdirs = [
     "wifi/keystore/1.0",
     "wifi/keystore/1.0/vts/functional",
+    "net",
 ]
diff --git a/current.txt b/current.txt
index b425367..2deada2 100644
--- a/current.txt
+++ b/current.txt
@@ -5,3 +5,4 @@
 
 
 b0ff0dc756845dd132f998e8c55f1a0d7e3efd8aa85f6253776fb7012814524b android.system.wifi.keystore@1.0::IKeystore
+fc7e79ce75cef6cf8e3c3b7bcbcb11df85eab3d3033cfb3e9fbd1698b93c14c1 android.system.net.netd@1.0::INetdHwService
diff --git a/net/Android.bp b/net/Android.bp
new file mode 100644
index 0000000..0ad8091
--- /dev/null
+++ b/net/Android.bp
@@ -0,0 +1,6 @@
+// This is an autogenerated file, do not edit.
+subdirs = [
+    "netd/1.0",
+    "netd/1.0/vts/functional",
+]
+
diff --git a/net/netd/1.0/Android.bp b/net/netd/1.0/Android.bp
new file mode 100644
index 0000000..a585d20
--- /dev/null
+++ b/net/netd/1.0/Android.bp
@@ -0,0 +1,59 @@
+// This file is autogenerated by hidl-gen. Do not edit manually.
+
+filegroup {
+    name: "android.system.net.netd@1.0_hal",
+    srcs: [
+        "INetd.hal",
+    ],
+}
+
+genrule {
+    name: "android.system.net.netd@1.0_genc++",
+    tools: ["hidl-gen"],
+    cmd: "$(location hidl-gen) -o $(genDir) -Lc++-sources -randroid.hidl:system/libhidl/transport -randroid.system:system/hardware/interfaces android.system.net.netd@1.0",
+    srcs: [
+        ":android.system.net.netd@1.0_hal",
+    ],
+    out: [
+        "android/system/net/netd/1.0/NetdAll.cpp",
+    ],
+}
+
+genrule {
+    name: "android.system.net.netd@1.0_genc++_headers",
+    tools: ["hidl-gen"],
+    cmd: "$(location hidl-gen) -o $(genDir) -Lc++-headers -randroid.hidl:system/libhidl/transport -randroid.system:system/hardware/interfaces android.system.net.netd@1.0",
+    srcs: [
+        ":android.system.net.netd@1.0_hal",
+    ],
+    out: [
+        "android/system/net/netd/1.0/INetd.h",
+        "android/system/net/netd/1.0/IHwNetd.h",
+        "android/system/net/netd/1.0/BnHwNetd.h",
+        "android/system/net/netd/1.0/BpHwNetd.h",
+        "android/system/net/netd/1.0/BsNetd.h",
+    ],
+}
+
+cc_library_shared {
+    name: "android.system.net.netd@1.0",
+    defaults: ["hidl-module-defaults"],
+    generated_sources: ["android.system.net.netd@1.0_genc++"],
+    generated_headers: ["android.system.net.netd@1.0_genc++_headers"],
+    export_generated_headers: ["android.system.net.netd@1.0_genc++_headers"],
+    vendor_available: true,
+    shared_libs: [
+        "libhidlbase",
+        "libhidltransport",
+        "libhwbinder",
+        "liblog",
+        "libutils",
+        "libcutils",
+    ],
+    export_shared_lib_headers: [
+        "libhidlbase",
+        "libhidltransport",
+        "libhwbinder",
+        "libutils",
+    ],
+}
diff --git a/net/netd/1.0/INetd.hal b/net/netd/1.0/INetd.hal
new file mode 100644
index 0000000..b9a1285
--- /dev/null
+++ b/net/netd/1.0/INetd.hal
@@ -0,0 +1,71 @@
+/*
+ *Copyright (c) 2017, The Linux Foundation. All rights reserved.
+ *
+ *Redistribution and use in source and binary forms, with or without
+ *modification, are permitted provided that the following conditions are
+ *met:
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+ *   * Neither the name of The Linux Foundation nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ *THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ *WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ *ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ *BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ *CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ *SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ *WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ *OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ *IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package android.system.net.netd@1.0;
+
+/**
+ * This is the root of the HAL module and is the interface returned when
+ * loading an implementation of the INetd HAL.
+ */
+interface INetd {
+    /**
+     * Return values for INetd requests
+     */
+    enum StatusCode : int32_t {
+        OK,
+        INVALID_ARGUMENTS,
+        NO_NETWORK,
+        ALREADY_EXISTS,
+        PERMISSION_DENIED,
+        UNKNOWN_ERROR
+    };
+
+    /**
+     * Creates a physical network to be used for interfaces managed by the OEM
+     *
+     * @return networkHandle a handle to the OEM network. Zero implies
+     *             no networks are available and created
+     * @return packetMark The packet mark that vendor network stack configuration code must use when
+     *             routing packets to this network. No applications may use this mark. They must
+     *             instead pass the networkHandle to the android_set*network LL-NDK APIs.
+     * @return status operation status
+     */
+    @entry
+    @callflow(next={"*"})
+    createOemNetwork() generates (uint64_t networkHandle, uint32_t packetMark, StatusCode status);
+
+    /**
+     * Destroys the specified network previously created using createOemNetwork()
+     *
+     * @return status operation status
+     */
+    @exit
+    @callflow(next="createOemNetwork")
+    destroyOemNetwork(uint64_t networkHandle) generates (StatusCode status);
+};
diff --git a/net/netd/1.0/vts/functional/Android.bp b/net/netd/1.0/vts/functional/Android.bp
new file mode 100644
index 0000000..61e612a
--- /dev/null
+++ b/net/netd/1.0/vts/functional/Android.bp
@@ -0,0 +1,18 @@
+cc_test {
+    name: "VtsHalNetNetdV1_0TargetTest",
+    srcs: [
+        "VtsHalNetNetdV1_0TargetTest.cpp",
+    ],
+    shared_libs: [
+        "liblog",
+        "libhidlbase",
+        "libhidltransport",
+        "libutils",
+        "android.system.net.netd@1.0",
+    ],
+    static_libs: ["VtsHalHidlTargetTestBase"],
+    cflags: [
+        "-O0",
+        "-g",
+    ],
+}
diff --git a/net/netd/1.0/vts/functional/VtsHalNetNetdV1_0TargetTest.cpp b/net/netd/1.0/vts/functional/VtsHalNetNetdV1_0TargetTest.cpp
new file mode 100644
index 0000000..595e95a
--- /dev/null
+++ b/net/netd/1.0/vts/functional/VtsHalNetNetdV1_0TargetTest.cpp
@@ -0,0 +1,81 @@
+/*
+ *Copyright (c) 2017, The Linux Foundation. All rights reserved.
+ *
+ *Redistribution and use in source and binary forms, with or without
+ *modification, are permitted provided that the following conditions are
+ *met:
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the following
+ *     disclaimer in the documentation and/or other materials provided
+ *     with the distribution.
+ *   * Neither the name of The Linux Foundation nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ *THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+ *WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ *ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+ *BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ *CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ *SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+ *BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ *WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ *OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ *IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#define LOG_TAG "netd_hidl_test"
+
+#include <android/system/net/netd/1.0/INetd.h>
+#include <log/log.h>
+#include <VtsHalHidlTargetTestBase.h>
+
+
+using ::android::system::net::netd::V1_0::INetd;
+using ::android::hardware::Return;
+using ::android::sp;
+
+class NetdHidlTest : public ::testing::VtsHalHidlTargetTestBase {
+public:
+    virtual void SetUp() override {
+        netd = ::testing::VtsHalHidlTargetTestBase::getService<INetd>();
+        ASSERT_NE(nullptr, netd.get()) << "Could not get HIDL instance";
+    }
+
+    sp<INetd> netd;
+};
+
+// positive test. Ensure netd creates an oem network and returns valid netHandle, and destroys it.
+TEST_F(NetdHidlTest, TestCreateAndDestroyOemNetworkOk) {
+    auto cb = [this](uint64_t netHandle,
+            uint32_t packetMark, INetd::StatusCode status) {
+
+        ASSERT_EQ(INetd::StatusCode::OK, status);
+        ASSERT_NE((uint64_t)0, netHandle);
+        ASSERT_NE((uint32_t)0, packetMark);
+
+        Return<INetd::StatusCode> retStatus = netd->destroyOemNetwork(netHandle);
+        ASSERT_EQ(INetd::StatusCode::OK, retStatus);
+    };
+
+    Return<void> ret = netd->createOemNetwork(cb);
+    ASSERT_TRUE(ret.isOk());
+}
+
+// negative test. Ensure destroy for invalid OEM network fails appropriately
+TEST_F(NetdHidlTest, TestDestroyOemNetworkInvalid) {
+    uint64_t nh = 0x6600FACADE;
+
+    Return<INetd::StatusCode> retStatus = netd->destroyOemNetwork(nh);
+    ASSERT_EQ(INetd::StatusCode::INVALID_ARGUMENTS, retStatus);
+}
+
+int main(int argc, char** argv) {
+    ::testing::InitGoogleTest(&argc, argv);
+    int status = RUN_ALL_TESTS();
+    ALOGE("Test result with status=%d", status);
+    return status;
+}
-- 
2.1.2

